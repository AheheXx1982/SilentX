---
interface Props {
  class?: string;
}
const { class: className } = Astro.props;
---

<div class={className} id="starry-background">
  <!-- 星空背景将通过 JavaScript 动态生成 -->
</div>

<style>
  #starry-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 0;
  }
</style>

<script>
  // 创建星空背景
  function createStarryBackground() {
    const container = document.getElementById('starry-background');
    if (!container) return;
    
    // 清空容器
    container.innerHTML = '';
    
    // 创建星星
    const starCount = 100;
    for (let i = 0; i < starCount; i++) {
      const star = document.createElement('div');
      star.classList.add('star');
      
      // 随机位置
      const x = Math.random() * 100;
      const y = Math.random() * 100;
      
      // 随机大小
      const size = Math.random() * 3;
      
      // 随机动画延迟和持续时间
      const delay = Math.random() * 5;
      const duration = 1 + Math.random() * 4;
      
      star.style.left = `${x}%`;
      star.style.top = `${y}%`;
      star.style.width = `${size}px`;
      star.style.height = `${size}px`;
      star.style.animationDelay = `${delay}s`;
      star.style.setProperty('--duration', `${duration}s`);
      
      container.appendChild(star);
    }
    
    // 创建流星
    for (let i = 0; i < 3; i++) {
      const shootingStar = document.createElement('div');
      shootingStar.classList.add('shooting-star');
      shootingStar.style.setProperty('--delay', `${i * 2}s`);
      container.appendChild(shootingStar);
    }
  }
  
  // 页面加载完成后创建星空背景
  document.addEventListener('DOMContentLoaded', createStarryBackground);
</script>

<style>
  .star {
    position: absolute;
    background-color: white;
    border-radius: 50%;
    animation: twinkle var(--duration, 2s) infinite ease-in-out;
  }
  
  @keyframes twinkle {
    0%, 100% { opacity: 0.2; }
    50% { opacity: 1; }
  }
  
  .shooting-star {
    position: absolute;
    top: 20%;
    right: -100px;
    width: 100px;
    height: 2px;
    background: linear-gradient(to left, rgba(255,255,255,0), rgba(255,255,255,1));
    transform: rotate(-30deg);
    animation: shoot 3s linear infinite;
    animation-delay: var(--delay, 0s);
  }
  
  @keyframes shoot {
    0% { transform: translateX(0) translateY(0) rotate(-30deg); opacity: 0; }
    10% { opacity: 1; }
    100% { transform: translateX(-100vw) translateY(50vh) rotate(-30deg); opacity: 0; }
  }
</style>